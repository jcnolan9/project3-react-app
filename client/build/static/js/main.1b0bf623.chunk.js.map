{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/ReminderForm.js","components/ReminderList.js","utils/queries.js","pages/Home.js","pages/Signup.js","pages/Login.js","pages/SingleReminder.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_USER","gql","ADD_REMINDER","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","ReminderForm","contacts","user","console","log","useState","reminderContact","setReminderContact","reminderContactType","setReminderContactType","reminderDate","setReminderDate","reminderMessage","setReminderMessage","useMutation","addReminder","error","handleFormSubmit","data","event","a","preventDefault","variables","contact","contactType","date","message","reminderOfUser","toLocaleString","handleChange","target","name","value","Auth","loggedIn","className","onSubmit","for","id","onChange","map","userContact","_id","firstName","lastName","type","placeholder","to","ReminderList","reminders","title","length","reminder","src","QUERY_USER_REMINDERS","QUERY_USER_CONTACTS","QUERY_REMINDER","Home","getProfile","userName","useQuery","loading","userContacts","remindersData","userReminders","Signup","email","password","formState","setFormState","addUser","login","style","cursor","Login","props","SingleReminder","reminderId","useParams","Header","onClick","logout","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAEaA,EAAaC,YAAH,qNAYVC,EAAeD,YAAH,wZA6BZE,EAAWF,YAAH,sW,wBCHN,M,0FArCb,WACE,OAAOG,YAAOC,KAAKC,c,sBAGrB,WACE,IAAMC,EAAQF,KAAKC,WAEnB,SAAOC,GAAUF,KAAKG,eAAeD,M,4BAGvC,SAAeA,GAIb,OAFgBH,YAAOG,GAEXE,IAAMC,KAAKC,MAAQ,MAC7BC,aAAaC,WAAW,aACjB,K,sBAMX,WACE,OAAOD,aAAaE,QAAQ,c,mBAG9B,SAAMC,GACJH,aAAaI,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WACEP,aAAaC,WAAW,YACxBI,OAAOC,SAASE,a,aCgHLC,EA7IM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAE9BC,QAAQC,IAAI,UAAWF,GAEvB,MAA8CG,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsDF,mBAAS,IAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAAwCJ,mBAAShB,KAAKC,OAAtD,mBAAOoB,EAAP,KAAqBC,EAArB,KACA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KAEA,EAAuCC,YAAYjC,GAAnD,mBAAOkC,EAAP,YAAsBC,EAAtB,EAAsBA,MAKhBC,GALN,EAA6BC,KAKP,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACrBD,EAAME,iBADe,kBAIMN,EAAY,CAC/BO,UAAW,CACPC,QAASjB,EACTkB,YAAahB,EACbiB,KAAMf,EACNgB,QAASd,EACTe,eAAgBzB,KAVP,kBAITgB,KAURX,EAAmB,IACnBE,EAAuB,IACvBE,EAAgBtB,KAAKC,MAAMsC,eAAe,UAC1Cf,EAAmB,IAjBF,kDAmBjBV,QAAQa,MAAR,MAnBiB,0DAAH,uDAuBhBa,EAAe,SAACV,GAClB,MAAwBA,EAAMW,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAOD,GACH,IAAK,UACDxB,EAAmByB,GACnB,MACJ,IAAK,cACDvB,EAAuBuB,GACvB,MACJ,IAAK,OACDrB,EAAgBqB,GAChB,MACJ,IAAK,UACDnB,EAAmBmB,GAG3B7B,QAAQC,IAAI,UAAW,CACnBmB,QAASjB,EACTkB,YAAahB,EACbiB,KAAMf,EACNgB,QAASd,EACTe,eAAgBzB,KAOxB,OACI,8BAEK+B,EAAKC,WACF,sBAAKC,UAAU,OAAf,UAEI,oBAAIA,UAAU,oDAAd,6BAEA,uBAAMC,SAAUnB,EAAhB,UACI,sBAAKkB,UAAU,aAAf,UAEQ,uBAAQE,IAAI,cAAZ,2BACA,yBAAQF,UAAU,sBAAsBJ,KAAK,UAAUO,GAAG,cAAcN,MAAO1B,EAAiBiC,SAAUV,EAA1G,UACI,wBAAgBG,MAAM,IAAV,KAER/B,EAASuC,KAAI,SAACC,GAAD,OACT,wBAA8BT,MAAOS,EAAYC,IAAjD,mBACQD,EAAYE,UADpB,YACiCF,EAAYG,WADhCH,EAAYC,WAQzC,uBAEA,kDAEI,uBAAOP,UAAU,4BAA4BU,KAAK,QAAQP,GAAG,OAAOP,KAAK,cAAcC,MAAM,OAAOO,SAAUV,IAC9G,uBAAOQ,IAAI,OAAX,kBAEA,uBAAOF,UAAU,4BAA4BU,KAAK,QAAQP,GAAG,QAAQP,KAAK,cAAcC,MAAM,QAAQO,SAAUV,IAChH,uBAAOQ,IAAI,QAAX,mBAEA,uBAAOF,UAAU,4BAA4BU,KAAK,QAAQP,GAAG,QAAQP,KAAK,cAAcC,MAAM,QAAQO,SAAUV,IAChH,uBAAOQ,IAAI,OAAX,2BAGJ,uBACA,uBAAOF,UAAU,GAAGE,IAAI,gBAAxB,mBACA,uBAAOF,UAAU,sBAAsBU,KAAK,OAAOd,KAAK,OAAOO,GAAG,gBAAgBN,MAAOtB,EAAc6B,SAAUV,IAEjH,uBAEA,uBAAOQ,IAAI,UAAX,sBAAqC,uBACrC,0BAAUF,UAAU,wBAAwBJ,KAAK,UAC7CO,GAAG,UACHQ,YAAY,gCACZd,MAAOpB,EACP2B,SAAUV,IAGd,0BAIJ,wBAAQM,UAAU,+BAA+BU,KAAK,SAAtD,6BAEC7B,GACG,qBAAKmB,UAAU,uCAAf,SACMnB,EAAMU,gBAMxB,4EACgD,IAC5C,cAAC,IAAD,CAAMqB,GAAG,SAAT,mBAFJ,OAEsC,cAAC,IAAD,CAAMA,GAAG,UAAT,2BChGvCC,EAzCM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAG/B,IAAIjB,EAAKC,aAAee,EAAUE,OAC9B,OAAQ,oGAaZ,OACI,gCACI,oBAAIhB,UAAU,sBAAd,SAAqCe,IACpCD,GACGA,EAAUT,KAAI,SAACY,GAAD,OACV,sBAAKjB,UAAU,0BAAf,UAGI,qBAAIA,UAAU,6BAAd,UAA4CiB,EAAS5B,YAArD,gBAAwE4B,EAAS7B,QAAQoB,UAAzF,YAAsGS,EAAS7B,QAAQqB,aAEvH,qBAAKS,KApBJ7B,EAoBqB4B,EAAS5B,YAnB7B,cAAfA,EACQ,YAEY,QAAfA,EACG,WAEJ,eAcS,mBAAGW,UAAU,kBAAb,SAAgCiB,EAAS3B,OACzC,cAAC,IAAD,CAAMsB,GAAE,qBAAgBK,EAASV,KAAjC,SACI,mBAAGP,UAAU,kBAAb,+CARsCiB,EAASV,KAfnD,IAAClB,SCTZ8B,EAAuB1E,YAAH,oQAgBpB2E,EAAsB3E,YAAH,gLAkBnB4E,GARa5E,YAAH,mHAQMA,YAAF,iRCwBZ6E,EAlDF,WAGT,IAAIvD,EACD+B,EAAKC,aACJhC,EAAO+B,EAAKyB,aAAaxC,KAAKyC,UAMlC,MAA0BC,YAASL,EAAqB,CACpDjC,UAAW,CAAEqC,SAAUzD,KADVgB,GAAjB,EAAQ2C,QAAR,EAAiB3C,MAGXjB,GAAe,OAAJiB,QAAI,IAAJA,OAAA,EAAAA,EAAM4C,eAAgB,GAKvC,EAA2DF,YAASN,EAAsB,CACtFhC,UAAW,CAACqC,SAAUzD,KADe6D,GAAzC,EAAQF,QAAR,EAAmC3C,MAG7B+B,GAAyB,OAAbc,QAAa,IAAbA,OAAA,EAAAA,EAAeC,gBAAiB,GAelD,OAdA7D,QAAQC,IAAI,gBAAiB6C,GAezB,iCAEI,8BACI,cAAC,EAAD,CAAchD,SAAUA,EAAUC,KAAMA,MAE5C,8BACI,cAAC,EAAD,CAAc+C,UAAWA,EAAWC,MAAM,6B,QCyEzCe,EAvHF,WACX,MAAkC5D,mBAAS,CACzCsC,UAAW,GACXC,SAAU,GACVe,SAAU,GACVO,MAAO,GACPC,SAAU,KALZ,mBAAOC,EAAP,KAAkBC,EAAlB,KAOD,EAAmCvD,YAAYhC,GAA/C,mBAAOwF,EAAP,YAAkBtD,EAAlB,EAAkBA,MAAOE,EAAzB,EAAyBA,KAElBW,EAAe,SAACV,GACpB,MAAwBA,EAAMW,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdqC,EAAa,2BACRD,GADO,kBAETrC,EAAOC,MAINf,EAAgB,uCAAG,WAAOE,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,iBACNlB,QAAQC,IAAIgE,GAFW,kBAKEE,EAAQ,CAC7BhD,UAAU,eAAM8C,KANG,gBAKblD,EALa,EAKbA,KAIRe,EAAKsC,MAAMrD,EAAKoD,QAAQpF,OATH,kDAWrBiB,QAAQa,MAAR,MAXqB,0DAAH,sDAetB,OACI,sBAAMmB,UAAU,+BAAhB,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,8BAAd,qBACA,sBAAKA,UAAU,YAAf,UACKjB,EACG,0DAC8B,IAC1B,cAAC,IAAD,CAAM6B,GAAG,IAAT,sCAGJ,uBAAMX,SAAUnB,EAAhB,UACI,uBAAOoB,IAAI,YAAX,yBACA,uBACIF,UAAU,aACVW,YAAY,aACZR,GAAG,YACHP,KAAK,YACLc,KAAK,OACLb,MAAOoC,EAAUzB,UACjBJ,SAAUV,IAEd,uBAAOQ,IAAI,WAAX,wBACA,uBACIF,UAAU,aACVW,YAAY,YACZR,GAAG,WACHP,KAAK,WACLc,KAAK,OACLb,MAAOoC,EAAUxB,SACjBL,SAAUV,IAEd,uBAAOQ,IAAI,WAAX,uBACA,uBACIF,UAAU,aACVW,YAAY,gBACZR,GAAG,WACHP,KAAK,WACLc,KAAK,OACLb,MAAOoC,EAAUT,SACjBpB,SAAUV,IAEd,uBAAOQ,IAAI,QAAX,oBACA,uBACIF,UAAU,aACVW,YAAY,aACZR,GAAG,QACHP,KAAK,QACLc,KAAK,QACLb,MAAOoC,EAAUF,MACjB3B,SAAUV,IAEd,uBAAOQ,IAAI,QAAX,uBACA,uBACIF,UAAU,aACVW,YAAY,SACZR,GAAG,WACHP,KAAK,WACLc,KAAK,WACLb,MAAOoC,EAAUD,SACjB5B,SAAUV,IAEd,wBACIM,UAAU,4BACVqC,MAAO,CAAEC,OAAQ,WACjB5B,KAAK,SAHT,uBAUP7B,GACG,qBAAKmB,UAAU,gCAAf,SACCnB,EAAMU,qBChBlBgD,EA9FH,SAACC,GACX,MAAkCtE,mBAAS,CAAE6D,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCvD,YAAYnC,GAA7C,mBAAO4F,EAAP,YAAgBvD,EAAhB,EAAgBA,MAAOE,EAAvB,EAAuBA,KAGjBW,EAAe,SAACV,GACpB,MAAwBA,EAAMW,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdqC,EAAa,2BACRD,GADO,kBAETrC,EAAOC,MAKNf,EAAgB,uCAAG,WAAOE,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,iBACNlB,QAAQC,IAAIgE,GAFW,kBAIEG,EAAM,CAC3BjD,UAAW,CACP4C,MAAOE,EAAUF,MACjBC,SAAUC,EAAUD,YAPL,gBAIbjD,EAJa,EAIbA,KAORe,EAAKsC,MAAMrD,EAAKqD,MAAMrF,OAXD,kDAarBiB,QAAQC,IAAI,gBACZD,QAAQa,MAAR,MAdqB,QAkBvBqD,EAAa,CACXH,MAAO,GACPC,SAAU,KApBW,0DAAH,sDAwBtB,OACE,sBAAMhC,UAAU,+BAAhB,SACE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,8BAAd,mBACA,sBAAKA,UAAU,YAAf,UACGjB,EACC,0DAC4B,IAC1B,cAAC,IAAD,CAAM6B,GAAG,IAAT,sCAGF,uBAAMX,SAAUnB,EAAhB,UACE,uBAAOoB,IAAI,QAAX,oBACA,uBACEF,UAAU,aACVW,YAAY,aACZR,GAAG,QACHP,KAAK,QACLc,KAAK,QACLb,MAAOoC,EAAUF,MACjB3B,SAAUV,IAEZ,uBAAOQ,IAAI,WAAX,uBACA,uBACEF,UAAU,aACVW,YAAY,SACZR,GAAG,WACHP,KAAK,WACLc,KAAK,WACLb,MAAOoC,EAAUD,SACjB5B,SAAUV,IAEZ,wBACEM,UAAU,4BACVqC,MAAO,CAAEC,OAAQ,WACjB5B,KAAK,SAHP,uBAUH7B,GACC,qBAAKmB,UAAU,gCAAf,SACGnB,EAAMU,qBChCVkD,EAlDQ,WACnB,IAAQC,EAAeC,cAAfD,WAER1E,QAAQC,IAAI,aAAcyE,GAE1B,MAA0BjB,YAASJ,EAAgB,CAC/ClC,UAAW,CACPoB,IAAKmC,KAFLhB,EAAR,EAAQA,QAAS3C,EAAjB,EAAiBA,KAMjBf,QAAQC,IAAI,OAAQc,GACpB,IAEqBM,EAFf4B,GAAe,OAAJlC,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,YAAa,GAapC,OAAIY,EACO,6CAWP,sBAAK1B,UAAU,0BAAf,UACI,qBAAIA,UAAU,6BAAd,UAA4CiB,EAAS5B,YAArD,IAAmE4B,EAAS7B,QAAQoB,UAApF,IAAgGS,EAAS7B,QAAQqB,YAEjH,qBAAKS,KA1BQ7B,EA0BS4B,EAAS5B,YAzBjB,cAAfA,EACQ,YAEY,QAAfA,EACG,WAEJ,eAoBH,mBAAGW,UAAU,kBAAb,SAAgCiB,EAAS3B,OACzC,mBAAGU,UAAU,0BAAb,sBACA,mBAAGA,UAAU,kBAAb,SAAgCiB,EAAS1B,cCRtCqD,EAvCA,WASX,OACI,wBAAQ5C,UAAU,uDAAlB,SACI,sBAAKA,UAAU,wDAAf,UACI,qBAAKA,UAAU,eAAf,2BAGA,qBAAKA,UAAU,kDAAf,SACKF,EAAKC,WACF,qCACA,yCAAYD,EAAKyB,aAAaxC,KAAKyC,YACnC,wBAAQxB,UAAU,MAAM6C,QAlB7B,SAAC7D,GACZA,EAAME,iBACNY,EAAKgD,UAgBW,uBAGA,qCACI,cAAC,IAAD,CAAMlC,GAAG,SAAT,SACI,wBAAQZ,UAAU,MAAlB,qBAEJ,cAAC,IAAD,CAAMY,GAAG,UAAT,SACI,wBAAQZ,UAAU,MAAlB,iCChB1B+C,EAAWC,YAAe,CAC9BC,IAAK,aAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BtG,EAAQK,aAAaE,QAAQ,YAEnC,MAAO,CACL+F,QAAQ,2BACHA,GADE,IAELC,cAAevG,EAAK,iBAAaA,GAAU,SAK3CwG,EAAS,IAAIC,IAAa,CAE9BC,KAAMP,EAASQ,OAAOX,GACtBY,MAAO,IAAIC,MA4BEC,MAzBf,WACE,OAEE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,sBAAKvD,UAAU,YAAf,UACE,cAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,yBAAlB,SACE,cAAC,EAAD,eC3CGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1b0bf623.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        userName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_REMINDER = gql`\r\nmutation addReminder($contact: ID!, $contactType: String!, $date: String!, $message: String!, $reminderOfUser: String!) {\r\n    addReminder(contact: $contact, contactType: $contactType, date: $date, message: $message, reminderOfUser: $reminderOfUser) {\r\n      _id\r\n      contact {\r\n          firstName\r\n          lastName\r\n      }\r\n      message\r\n      reminderOfUser\r\n    }\r\n  }\r\n`;\r\n\r\n// export const ADD_CONTACT = gql`\r\n//   mutation addThought($thoughtText: String!, $thoughtAuthor: String!) {\r\n//     addThought(thoughtText: $thoughtText, thoughtAuthor: $thoughtAuthor) {\r\n//       _id\r\n//       thoughtText\r\n//       thoughtAuthor\r\n//       createdAt\r\n//       comments {\r\n//         _id\r\n//         commentText\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($firstName: String!, $lastName: String!,  $userName: String!, $email: String!, $password: String!) {\r\n        addUser(firstName: $firstName, lastName: $lastName, userName: $userName, email: $email, password: $password) {\r\n         token\r\n         user {\r\n         _id\r\n         userName\r\n      }\r\n    }\r\n  }\r\n`;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    const token = this.getToken();\r\n    // If there is a token and it's not expired, return `true`\r\n    return token && !this.isTokenExpired(token) ? true : false;\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    // Decode the token to get its expiration time that was set by the server\r\n    const decoded = decode(token);\r\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\r\n    if (decoded.exp < Date.now() / 1000) {\r\n      localStorage.removeItem('id_token');\r\n      return true;\r\n    }\r\n    // If token hasn't passed its expiration time, return `false`\r\n    return false;\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('id_token');\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n\r\n import { ADD_REMINDER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst ReminderForm = ({ contacts, user }) => {\r\n\r\n    console.log(\"MyUser:\", user)\r\n\r\n    const [reminderContact, setReminderContact] = useState('')\r\n    const [reminderContactType, setReminderContactType] = useState('')\r\n    const [reminderDate, setReminderDate] = useState(Date.now())\r\n    const [reminderMessage, setReminderMessage] = useState('')\r\n\r\n    const [addReminder, { error, data }] = useMutation(ADD_REMINDER)\r\n\r\n\r\n    // console.log(\"Logged In:\", Auth.getProfile().data.username)\r\n    \r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        try {\r\n            const { data } = await addReminder({\r\n                variables: {\r\n                    contact: reminderContact,\r\n                    contactType: reminderContactType,\r\n                    date: reminderDate,\r\n                    message: reminderMessage,\r\n                    reminderOfUser: user\r\n                }\r\n            })\r\n\r\n            setReminderContact('')\r\n            setReminderContactType('')\r\n            setReminderDate(Date.now().toLocaleString('en-US'))\r\n            setReminderMessage('')\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        switch(name) {\r\n            case \"contact\":\r\n                setReminderContact(value)\r\n                break\r\n            case \"contactType\":\r\n                setReminderContactType(value)\r\n                break\r\n            case \"date\":\r\n                setReminderDate(value)\r\n                break\r\n            case \"message\":\r\n                setReminderMessage(value)\r\n                break\r\n        }\r\n        console.log(\"contact\", {\r\n            contact: reminderContact,\r\n            contactType: reminderContactType,\r\n            date: reminderDate,\r\n            message: reminderMessage,\r\n            reminderOfUser: user\r\n        })\r\n    }\r\n\r\n    //if there is only 1 option in the select tag below the onChange for whatever reason never registers\r\n    //adding a blank tag as the first option and forcing the user to switch the mapped option below fixes the issue\r\n\r\n    return (\r\n        <div>\r\n           \r\n            {Auth.loggedIn() ?\r\n                <div className='card'>\r\n               \r\n                    <h2 className='login-header text-light reminder-form-card-header'>Create Reminder</h2>\r\n\r\n                    <form onSubmit={handleFormSubmit}>\r\n                        <div className='container '>\r\n                            \r\n                                <label  for=\"contactList\">Contact Name:</label>\r\n                                <select className='reminder-form-input' name=\"contact\" id=\"contactList\" value={reminderContact} onChange={handleChange}>\r\n                                    <option key=\"0\" value=\"\"></option>\r\n                                    {\r\n                                        contacts.map((userContact) => (\r\n                                            <option key={userContact._id} value={userContact._id}>\r\n                                                {`${userContact.firstName} ${userContact.lastName}`}\r\n                                            </option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                           \r\n                            \r\n                            <br></br>\r\n                            \r\n                            <label>\r\n                                How to Reach:\r\n                                <input className='reminder-form-input-radio' type=\"radio\" id=\"text\" name=\"contactType\" value=\"text\" onChange={handleChange} />\r\n                                <label for=\"text\">Text</label>\r\n                                \r\n                                <input className='reminder-form-input-radio' type=\"radio\" id=\"email\" name=\"contactType\" value=\"email\" onChange={handleChange}/>\r\n                                <label for=\"email\">Email</label>\r\n                                \r\n                                <input className='reminder-form-input-radio' type=\"radio\" id=\"phone\" name=\"contactType\" value=\"phone\" onChange={handleChange}/>\r\n                                <label for=\"text\">Phone Call</label>\r\n                            </label>\r\n\r\n                            <br></br>\r\n                            <label className='' for=\"reminder-date\">Date:</label>\r\n                            <input className='reminder-form-input' type=\"text\" name='date' id=\"reminder-date\" value={reminderDate} onChange={handleChange}></input>\r\n                            \r\n                            <br></br>\r\n\r\n                            <label for=\"message\">Message:</label><br></br>\r\n                            <textarea className='reminder-form-message' name=\"message\"\r\n                                id=\"message\" \r\n                                placeholder=\"What do want to talk about...\" \r\n                                value={reminderMessage}\r\n                                onChange={handleChange}\r\n                            ></textarea>\r\n                        \r\n                            <br></br>\r\n                            \r\n                        </div>\r\n\r\n                        <button className='btn btn-reverse btn-reminder' type='submit'>Create Reminder</button>\r\n\r\n                        {error && (\r\n                            <div className=\"col-12 my-3 bg-danger text-white p-3\">\r\n                                 {error.message}\r\n                            </div>\r\n                        )}\r\n                    </form>\r\n                </div>\r\n            : (\r\n                <p>\r\n                    Please sign in to create a reminder. Please{' '}\r\n                    <Link to=\"/login\">login</Link> or <Link to=\"/signup\">singup.</Link>\r\n                </p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReminderForm","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Auth from '../utils/auth'\r\n\r\nconst ReminderList = ({ reminders, title }) => {\r\n    // console.log(\"reminders\", reminders)\r\n   \r\n    if(!Auth.loggedIn() || !reminders.length) {\r\n        return (<h2>No Reminders Yet. Create some to keep in touch with your contacts!</h2>)\r\n    }  \r\n\r\n    const imagePicker = (contactType) => {\r\n        if(contactType == 'phone call') {\r\n            return \"phone.png\"\r\n        }\r\n        else if(contactType == \"text\") {\r\n            return \"text.png\"\r\n        }\r\n        return \"email.png\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className='reminder-list-title'>{title}</h2>\r\n            {reminders &&\r\n                reminders.map((reminder) => (\r\n                    <div className=\"card card-reminder-list\" key={reminder._id}>\r\n                        \r\n                        \r\n                        <h3 className='text-light reminder-header'>{reminder.contactType} - {`${reminder.contact.firstName} ${reminder.contact.lastName}`}</h3>\r\n                        \r\n                        <img src={imagePicker(reminder.contactType)}></img>\r\n                        <p className=\"reminder-list-p\">{reminder.date}</p>\r\n                        <Link to={`/reminders/${reminder._id}`}>\r\n                            <p className='reminder-list-p'>\r\n                                View and Update this Reminder\r\n                            </p>\r\n                        </Link>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReminderList","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USER_REMINDERS = gql`\r\n  query userReminders($userName: String!) {\r\n    userReminders(userName: $userName) {\r\n      _id\r\n      contact {\r\n        _id\r\n        firstName\r\n        lastName\r\n      }\r\n      contactType\r\n      date\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER_CONTACTS = gql`\r\n  query userContacts($userName: String!) {\r\n    userContacts (userName: $userName) {\r\n        _id\r\n        firstName\r\n        lastName\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  query user($_id: ID!) {\r\n      user (_id: $_id) {\r\n          userName\r\n      }\r\n  }\r\n`;\r\n\r\nexport const QUERY_REMINDER =gql`\r\n  query reminders($_id: ID!) {\r\n      reminders(_id: $_id) {\r\n        contact {\r\n            _id\r\n            firstName\r\n            lastName\r\n          }\r\n        contactType\r\n        date\r\n        message\r\n        reminderOfUser\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport ReminderForm from '../components/ReminderForm';\r\nimport ReminderList from '../components/ReminderList';\r\n\r\nimport { QUERY_USER_CONTACTS, QUERY_USER_REMINDERS, QUERY_USER } from '../utils/queries';\r\nimport Auth from '../utils/auth'\r\n\r\n\r\n\r\nconst Home = () => {\r\n  \r\n\r\n    let user\r\n    if(Auth.loggedIn()) {\r\n        user = Auth.getProfile().data.userName\r\n    }\r\n    //if nobody is logged in doing Ath.getProfile()... breaks the page so it must be in conditional to render at all times \r\n    \r\n    //this must be named \"data\"\r\n    //loading, data, and err are keywords\r\n    const { loading, data } = useQuery(QUERY_USER_CONTACTS, {\r\n        variables: { userName: user }\r\n    })\r\n    const contacts = data?.userContacts || []\r\n    //you cannot do data.userContacts but the data?.userContacts syntax works for whatever reason\r\n\r\n\r\n    //if more than 1 query on a page have to do \"data:reminderData\"\r\n    const { loading: remindersLoading, data: remindersData } = useQuery(QUERY_USER_REMINDERS, {\r\n        variables: {userName: user}\r\n    })\r\n    const reminders = remindersData?.userReminders || []\r\n    console.log(\"remindersData\", reminders)\r\n\r\n    // let myUser\r\n\r\n\r\n\r\n    // if(Auth.loggedIn()) {\r\n    //     const { loading: userLoading, data: userData } = useQuery(QUERY_USER, {\r\n    //         variables: {_id: Auth.getProfile().data._id}\r\n    //     })\r\n    //     myUser = userData?.user || []\r\n    //     console.log(\"userData\", myUser)\r\n    // }\r\n    \r\n    return (\r\n        <main>\r\n            \r\n            <div>\r\n                <ReminderForm contacts={contacts} user={user}/>\r\n            </div>\r\n            <div>\r\n                <ReminderList reminders={reminders} title=\"Upcoming Reminders\"/>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Signup = () => {\r\n    const [formState, setFormState] = useState({\r\n      firstName: '',\r\n      lastName: '',\r\n      userName: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n   const [addUser, { error, data }] = useMutation(ADD_USER);\r\n  \r\n    const handleChange = (event) => {\r\n      const { name, value } = event.target;\r\n  \r\n      setFormState({\r\n        ...formState,\r\n        [name]: value,\r\n      });\r\n    };\r\n  \r\n    const handleFormSubmit = async (event) => {\r\n      event.preventDefault();\r\n      console.log(formState);\r\n  \r\n      try {\r\n        const { data } = await addUser({\r\n          variables: { ...formState },\r\n        });\r\n  \r\n        Auth.login(data.addUser.token);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n  \r\n    return (\r\n        <main className=\"flex-row justify-center mb-4\">\r\n            <div className=\"col-12 col-lg-10\">\r\n                <div className=\"card\">\r\n                    <h4 className=\"text-light p-2 login-header\">Sign Up</h4>\r\n                    <div className=\"card-body\">\r\n                        {data ? (\r\n                            <p>\r\n                                Success! You may now head{' '}\r\n                                <Link to=\"/\">back to the homepage.</Link>\r\n                            </p>\r\n                        ) : (\r\n                            <form onSubmit={handleFormSubmit}>\r\n                                <label for='firstName'>First Name:</label>\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"First Name\"\r\n                                    id='firstName'\r\n                                    name=\"firstName\"\r\n                                    type=\"text\"\r\n                                    value={formState.firstName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <label for='lastName'>Last Name:</label>\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Last Name\"\r\n                                    id='lastName'\r\n                                    name=\"lastName\"\r\n                                    type=\"text\"\r\n                                    value={formState.lastName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <label for='lastName'>Username:</label>\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Your username\"\r\n                                    id='userName'\r\n                                    name=\"userName\"\r\n                                    type=\"text\"\r\n                                    value={formState.userName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <label for='email'>Email:</label>\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Your email\"\r\n                                    id='email'\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    value={formState.email}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <label for='email'>Password:</label>\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"******\"\r\n                                    id='password'\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={formState.password}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <button\r\n                                    className=\"btn btn-block btn-reverse\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </form>\r\n                        )}\r\n  \r\n                        {error && (\r\n                            <div className=\"my-3 p-3 bg-danger text-white\">\r\n                            {error.message}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n  };\r\n\r\n  export default Signup","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Login = (props) => {\r\n    const [formState, setFormState] = useState({ email: '', password: '' });\r\n    const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  \r\n    // update state based on form input changes\r\n    const handleChange = (event) => {\r\n      const { name, value } = event.target;\r\n  \r\n      setFormState({\r\n        ...formState,\r\n        [name]: value,\r\n      });\r\n    };\r\n  \r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n      event.preventDefault();\r\n      console.log(formState);\r\n      try {\r\n        const { data } = await login({\r\n          variables: { \r\n              email: formState.email,\r\n              password: formState.password\r\n           },\r\n        });\r\n        \r\n        Auth.login(data.login.token);\r\n      } catch (e) {\r\n        console.log(\"Helllooooooo\")\r\n        console.error(e);\r\n      }\r\n  \r\n      // clear form values\r\n      setFormState({\r\n        email: '',\r\n        password: '',\r\n      });\r\n    };\r\n  \r\n    return (\r\n      <main className=\"flex-row justify-center mb-4\">\r\n        <div className=\"col-12 col-lg-10\">\r\n          <div className=\"card\">\r\n            <h4 className=\"text-light p-2 login-header\">Login</h4>\r\n            <div className=\"card-body\">\r\n              {data ? (\r\n                <p>\r\n                  Success! You may now head{' '}\r\n                  <Link to=\"/\">back to the homepage.</Link>\r\n                </p>\r\n              ) : (\r\n                <form onSubmit={handleFormSubmit}>\r\n                  <label for='email'>Email:</label>\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"Your email\"\r\n                    id='email'\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    value={formState.email}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <label for='password'>Password:</label>\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"******\"\r\n                    id='password'\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={formState.password}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <button\r\n                    className=\"btn btn-block btn-reverse\"\r\n                    style={{ cursor: 'pointer' }}\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              )}\r\n  \r\n              {error && (\r\n                <div className=\"my-3 p-3 bg-danger text-white\">\r\n                  {error.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  };\r\n\r\n  export default Login","import React from 'react';\r\n\r\n// Import the `useParams()` hook\r\nimport { useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport { QUERY_REMINDER } from '../utils/queries';\r\n\r\n\r\nconst SingleReminder = () => {\r\n    const { reminderId } = useParams()\r\n\r\n    console.log(\"reminderId\", reminderId)\r\n\r\n    const { loading, data } = useQuery(QUERY_REMINDER, {\r\n        variables: {\r\n            _id: reminderId\r\n         }\r\n    })\r\n\r\n    console.log(\"data\", data)\r\n    const reminder = data?.reminders || {}\r\n\r\n    const imagePicker = (contactType) => {\r\n        if(contactType == 'phone call') {\r\n            return \"phone.png\"\r\n        }\r\n        else if(contactType == \"text\") {\r\n            return \"text.png\"\r\n        }\r\n        return \"email.png\"\r\n    }\r\n\r\n    //all I had to do was add this to stop the app the from breaking and showing nothing when hitting the back button\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    // console.log(\"reminder object\", reminder)\r\n    // console.log(\"reminder name\", reminder.contact.firstName)\r\n    // console.log(\"reminder message\", reminder.message)\r\n\r\n    //if stops working comment out stuff in return, reminder name console log, and reminder message console log\r\n    //keep reminder object. then re-enable all those things\r\n\r\n    return (\r\n        <div className='card card-reminder-list'>\r\n            <h2 className='text-light reminder-header'>{reminder.contactType} {reminder.contact.firstName} {reminder.contact.lastName}</h2>\r\n            \r\n            <img src={imagePicker(reminder.contactType)}></img>\r\n            <p className='reminder-list-p'>{reminder.date}</p>\r\n            <p className='reminder-list-p message'>Message:</p>\r\n            <p className='reminder-list-p'>{reminder.message}</p>\r\n        </div>\r\n        // <>\r\n        // </>\r\n    )\r\n}\r\n\r\nexport default SingleReminder","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Header = () => {\r\n    const logout = (event) => {\r\n        event.preventDefault();\r\n        Auth.logout();\r\n    }\r\n\r\n    //   console.log(\"username\", Auth.getProfile().data.userName)\r\n    \r\n\r\n    return (\r\n        <header className=\"bg-header text-light mb-4 py-3 flex-row align-center\">\r\n            <div className=\"container flex-row justify-space-between align-center\">\r\n                <div className='header-title'>\r\n                    Keep In Touch \r\n                </div>\r\n                <div className='container flex-row justify-flex-end align-start'>\r\n                    {Auth.loggedIn() ? (\r\n                        <>\r\n                        <p>Welcome {Auth.getProfile().data.userName}</p> \r\n                        <button className='btn' onClick={logout}>Logout</button>\r\n                        </>\r\n                        ) : (\r\n                        <>\r\n                            <Link to='/login'>\r\n                                <button className='btn'>Login</button>\r\n                            </Link>\r\n                            <Link to='/signup'>\r\n                                <button className='btn'>Signup</button>\r\n                            </Link>\r\n                        </>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport SingleReminder from './pages/SingleReminder';\nimport Header from './components/Header';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n   \n    <ApolloProvider client={client}>\n      <Router>\n        <Header />\n        <div className=\"container\">\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          <Route exact path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route exact path=\"/reminders/:reminderId\">\n            <SingleReminder />\n          </Route>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}